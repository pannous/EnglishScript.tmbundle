<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>e</string>
		<string>an</string>
		<string>angle</string>
	</array>
	<key>foldingStartMarker</key>
	<string>(
		 how to\s+
		|^to .*
		|define.*
		|if\b .* \bthen\b
		|repeat\b .*
		|while\b .*
		|try\b .*)
	</string>
	
   <!-- <key>foldingStartMarker</key>
   <string>^\s*#\s*region|^\s*/\*|^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?\{\s*($|//|/\*(?!.*?\*/.*\S))</string>
   <key>foldingStopMarker</key> -->
   <!-- <string>^\s*#\s*endregion|^\s*\*/|^\s*\}</string> -->
	<key>foldingStopMarker</key>
	<string>^\s*(end|done|ok|finished|OK)\b.*</string>
	<key>keyEquivalent</key>
	<string>~@E</string>
	<key>name</key>
	<string>EnglishScript</string>
	<key>patterns</key>
	<array>
				<dict>
					<key>begin</key>
					<string>\[</string>
					<key>end</key>
					<string>\]</string>
					<key>name</key>
					<string>meta.method.annotation</string>
				</dict>
		<dict>
			<key>match</key>
	<string>\b(define|if|while|for|return|result|it|out|but|not|neither|nor|and|or|xor|then|do|otherwise|as|default|finally|end|ok|done|endif|OK|macro|once|whenever|type|print|rescue|assert)\b</string>
			<key>name</key>
			<string>keyword</string>
      </dict>
      <dict>
         <key>match</key>
         <string>to\b([A-Za-z_]\w*)\b</string>
         <key>name</key>
         <string>entity.name.function</string>
      </dict>
      <dict>
         <key>match</key>
         <string>(?set|var|val)\b([A-Za-z_]\w*)\b</string>
         <key>name</key>
         <string>constant</string>
      </dict>
      <dict>
         <key>match</key>
 <string>\b(if|else|while|for|foreach|in|do|return|continue|break|switch|case|default|goto|throw|try|catch|finally|lock|yield)\b</string>
         <key>name</key>
         <string>keyword.control.source.cs</string>
      </dict>
      <dict>
         <key>match</key>
         <string>\b(from|where|select|group|into|orderby|join|let|on|equals|by|ascending|descending)\b</string>
         <key>name</key>
         <string>keyword.linq</string>
      </dict>
      <dict>
         <key>match</key>
         <string>\b(new|is|as|using|checked|unchecked|typeof|sizeof|override|readonly|stackalloc)\b</string>
         <key>name</key>
         <string>keyword.operator</string>
      </dict>
      <dict>
         <key>match</key>
         <string>\b(var|event|delegate|add|remove|set|get|value)\b</string>
         <key>name</key>
         <string>keyword.other</string>
      </dict>
		<dict>
			<key>match</key>
			<string>\b(let|set|var|val|less|smaller|equal|equals|same)\b</string>
			<key>name</key>
			<string>storage</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(this|these|those|that|pi|\d+|one|two|zero|100)\b</string>
			<key>name</key>
			<string>constant.numeric</string>
		</dict>		
      <dict>
         <key>match</key>
         <string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
         <key>name</key>
         <string>constant.numeric.source</string>
      </dict>
		<dict>
			<key>match</key>
			<string>\b(my|result|it|your|anything|true|false|yes|no|nil|null|nix|nill|nil|none|no|null|any|all|some|this|base|super)\b</string>
			<key>name</key>
			<string>constant.language</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(x|y|z|i)\b</string>
			<key>name</key>
			<string>variable.language</string>
		</dict>
		<dict>
			<key>match</key>
	<string>\b(at|in|by|of|about|above|after|against|apart|around|as|as|before|behind|below|beneath|beside|between|considering|from|in|instead|into|of|on|onto|over|since|through|thru|to|with|without)\b</string>
			<key>name</key>
			<string>keyword.preposition</string>
		</dict>
				<dict>
			<key>match</key>
			<string>\b(=|be|is|are|equals|to)\b</string>
			<key>name</key>
			<string>article.equals</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(a|an|the|you|that|this|these)\b</string>
			<key>name</key>
			<string>article</string>
		</dict>
      <dict>
         <key>match</key>               <string>\b(bool|byte|sbyte|char|decimal|double|float|int|uint|long|ulong|object|short|ushort|string|void|class|struct|enum|interface|number|real|bigint|integer|boolean|character|word|item)\b</string>
         <key>name</key>
         <string>storage.type</string>
      </dict>
		<dict>
			<key>match</key>
	<string>\b(event|delegate|internal|public|protected|private|static|const|constant|new|sealed|abstract|virtual|override|extern|unsafe|readonly|volatile|implicit|explicit|operator)\b</string>
			<key>name</key>
			<string>storage.modifier</string>
		</dict>
      <dict>
			<key>match</key>
			<string>//.*|/\*.*\*/|--.*|&lt;!--.*|.*--&gt;|#.*</string>
			<key>name</key>
			<string>comment</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"</string>
			<key>name</key>
			<string>string.quoted.double.untitled</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.untitled</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.function.e</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.e</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
               <!-- <string>rest.storage.args</string> -->
					<string>storage.args</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>match regular function like: function myFunc(arg) { … }</string>
			<key>match</key>
			<string>\b(to|function|fun|ƒ|define|def|how to|method|void|public\svoid)\b([a-zA-Z]+)\b(.*?)</string>
			<key>name</key>
			<string>meta.function</string>
		</dict>
	</array>
	<key>scopeName</key>
	<string>source.englishScript</string>
	<key>uuid</key>
	<string>82344575-61EC-45EF-BB84-6662B5C9062A</string>
</dict>
</plist>
